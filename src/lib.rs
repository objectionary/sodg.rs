// SPDX-FileCopyrightText: Copyright (c) 2022-2025 Objectionary.com
// SPDX-License-Identifier: MIT

//! This is a memory structure with vertices and edges between them,
//! which we call Surging Object `DiGraph` (SODG), because it expects
//! modifications comping from a user (through [`Sodg::add`],
//! [`Sodg::bind`], and [`Sodg::put`]) and then decides itself when
//! it's time to delete some vertices (something similar to
//! "garbage collection").
//!
//! Behind the API the crate combines three performance-oriented
//! building blocks:
//!
//! * Labels are interned via [`LabelInterner`], which canonicalizes each
//!   [`Label`] into its UTF-8 representation so that high-level code keeps the
//!   typed enum while the engine manipulates compact numeric identifiers.
//! * Outbound edges are tracked by [`EdgeIndex`], a hybrid structure that
//!   starts with a small, fixed-capacity map and seamlessly upgrades to a
//!   hash map once the vertex degree grows past [`edge_index::SMALL_THRESHOLD`].
//!   This avoids the cost of hashing in the common case but keeps large graphs
//!   responsive.
//! * [`Hex`] payloads use a dual representation: stack-allocated arrays serve
//!   short blobs, while larger data is shared through reference-counted slices.
//!   Graph traversals therefore copy as little as possible while still offering
//!   cheap cloning semantics for read-heavy workloads.
//!
//! For example, here is how you create a simple
//! di-graph with two vertices and an edge between them:
//!
//! ```
//! use std::str::FromStr as _;
//!
//! use sodg::{Label, Sodg};
//! let mut sodg: Sodg<16> = Sodg::empty(256);
//! sodg.add(0);
//! sodg.add(1);
//! sodg.bind(0, 1, Label::from_str("foo").unwrap()).unwrap();
//! ```

#![doc(html_root_url = "https://docs.rs/sodg/0.0.0")]
#![deny(warnings)]
#![warn(clippy::all, clippy::pedantic, clippy::nursery, clippy::cargo)]
#![allow(clippy::multiple_inherent_impl)]
#![allow(clippy::multiple_crate_versions)]

use std::collections::HashMap;
use std::sync::Arc;

use serde::{Deserialize, Serialize};
use smallvec::SmallVec;

mod clone;
mod ctors;
mod debug;
mod dot;
mod edge_index;
mod find;
mod hex;
mod inspect;
mod label;
mod labels;
mod merge;
mod misc;
mod next;
mod ops;
mod script;
mod serialization;
mod slice;
mod xml;

pub use crate::labels::{LabelId, LabelInterner, LabelInternerError};
pub use crate::ops::{BindError, KidRef};
pub use edge_index::{Edge, EdgeIndex, EdgeIndexEntry, SMALL_THRESHOLD};

const HEX_SIZE: usize = 8;
const MAX_BRANCHES: usize = 16;
const BRANCH_INLINE_CAPACITY: usize = 16;

type BranchMembers = SmallVec<[usize; BRANCH_INLINE_CAPACITY]>;

/// An object-oriented representation of binary data
/// in hexadecimal format, which can be put into vertices of the graph.
///
/// You can create it from Rust primitives:
///
/// ```
/// use sodg::Hex;
/// let d = Hex::from(65534);
/// assert_eq!("00-00-FF-FE", d.print());
/// ```
///
/// Then, you can turn it back to Rust primitives:
///
/// ```
/// use sodg::Hex;
/// let d = Hex::from(65534_i64);
/// assert_eq!(65534, d.to_i64().unwrap());
/// ```
#[derive(Clone)]
pub enum Hex {
    Shared(Arc<[u8]>),
    Bytes([u8; HEX_SIZE], usize),
}

/// A label on an edge.
///
/// Labels remain strongly typed through this enum, while the
/// [`LabelInterner`] stores their canonical UTF-8 representation to match the
/// `&str`-based expectations of external integrations.
#[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Clone, Copy, Serialize, Deserialize)]
pub enum Label {
    Greek(char),
    Alpha(usize),
    Str([char; 8]),
}

/// A wrapper of a plain text with graph-modifying instructions.
///
/// For example, you can pass the following instructions to it:
///
/// ```text
/// ADD(0);
/// ADD($ν1); # adding new vertex
/// BIND(0, $ν1, foo);
/// PUT($ν1, d0-bf-D1-80-d0-B8-d0-b2-d0-b5-d1-82);
/// ```
///
/// In the script you can use "variables", similar to `$ν1` used
/// in the text above. They will be replaced by autogenerated numbers
/// during the deployment of this script to a [`Sodg`].
pub struct Script {
    /// The text of it.
    txt: String,
    /// The vars dynamically discovered.
    vars: HashMap<String, usize>,
}

/// A struct that represents a Surging Object Di-Graph (SODG).
///
/// You add vertices to it, bind them one to one with edges,
/// put data into some of them, and read data back, for example:
///
/// ```
/// use sodg::{Label, Sodg};
/// let mut sodg: Sodg<16> = Sodg::empty(256);
/// sodg.add(0);
/// sodg.add(1);
/// sodg.bind(0, 1, Label::Alpha(0)).unwrap();
/// sodg.add(2);
/// sodg.bind(1, 2, Label::Alpha(1)).unwrap();
/// assert_eq!(1, sodg.kids(0).count());
/// assert_eq!(1, sodg.kids(1).count());
/// ```
///
/// This package is used in [reo](https://github.com/objectionary/reo)
/// project, as a memory model for objects and dependencies between them.
const fn default_vertex_capacity() -> usize {
    0
}

#[derive(Serialize, Deserialize)]
pub struct Sodg<const N: usize> {
    #[serde(default = "default_vertex_capacity")]
    vertex_capacity: usize,
    stores: emap::Map<usize>,
    branches: emap::Map<BranchMembers>,
    vertices: emap::Map<Vertex<N>>,
    /// Interned labels that back the graph's edge metadata.
    labels: LabelInterner,
    /// This is the next ID of a vertex to be returned by the [`Sodg::next_v`] function.
    #[serde(skip_serializing, skip_deserializing)]
    next_v: usize,
}

#[derive(PartialEq, Serialize, Deserialize, Clone)]
enum Persistence {
    Empty,
    Stored,
    Taken,
}

const BRANCH_NONE: usize = 0;
const BRANCH_STATIC: usize = 1;

#[derive(Serialize, Deserialize, Clone)]
struct Vertex<const N: usize> {
    branch: usize,
    data: Hex,
    persistence: Persistence,
    edges: Vec<Edge>,
    #[serde(skip)]
    index: EdgeIndex,
}

#[cfg(test)]
#[ctor::ctor]
fn init() {
    use log::LevelFilter;
    use simple_logger::SimpleLogger;

    SimpleLogger::new().without_timestamps().with_level(LevelFilter::Trace).init().unwrap();
}
